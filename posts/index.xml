<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Abhigyan Kishor</title>
        <link>https://www.abhigyankishor.ga/posts/</link>
        <description>Recent content in Posts on Abhigyan Kishor</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Fri, 24 Jun 2022 12:23:58 +0300</lastBuildDate>
        <atom:link href="https://www.abhigyankishor.ga/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Extending Fast(er) Downloads</title>
            <link>https://www.abhigyankishor.ga/posts/2022/06/extending-faster-downloads/</link>
            <pubDate>Fri, 24 Jun 2022 12:23:58 +0300</pubDate>
            
            <guid>https://www.abhigyankishor.ga/posts/2022/06/extending-faster-downloads/</guid>
            <description>Fast(er) downloads from Google Earth Engine: Tiling This series was inspired by this article by Noel Gorelick. I will try and apply his article for a more specific use case of downloading satellite imagery for a large region of interest. This article requires an understanding of the limitations of earth engine, particularly ee.Image.getDownloadURL(), because it is aimed at providing a work-around. Today we discuss the first step towards big downloads, tiling the region of interest.</description>
            <content type="html"><![CDATA[<h2 id="faster-downloads-from-google-earth-engine-tiling">Fast(er) downloads from Google Earth Engine: Tiling</h2>
<p>This series was inspired by <a href="https://gorelick.medium.com/fast-er-downloads-a2abd512aa26">this</a> article by Noel Gorelick. I will try and apply his article for a more specific use case of downloading satellite imagery for a large region of interest. This article requires an understanding of the limitations of earth engine, particularly <a href="https://developers.google.com/earth-engine/apidocs/ee-image-getdownloadurl"><code>ee.Image.getDownloadURL()</code></a>, because it is aimed at providing a work-around. Today we discuss the first step towards big downloads, <strong>tiling the region of interest</strong>.</p>
<h3 id="overview">Overview</h3>
<p>This whole approach revolves around one function to facilitate parallel downloads, i.e. <code>ee.FeatureCollection.aggregate_array('.geo').getInfo()</code>. This is because, <code>aggregate_array()</code> returns a <em>list</em>, which can be passed on to <code>map()</code> or <code>starmap()</code> (in python) to be called in parallel. So any fast earth-engine downloader will have the following structure:</p>
<ol>
<li><strong>getTiles()</strong> : Returns the geometries of the tiles</li>
<li><strong>getImage() / getImageCollection()</strong> : Returns the image/images to be tiled</li>
<li><strong>getChip()</strong> : Downloads individual chips. To be called parallely against the list of geometries discussed bove.</li>
<li><strong>stitch()</strong> : stitches the tiles to final image</li>
</ol>
<h3 id="basic-tiling">Basic tiling</h3>
<p>The aim of this process is to simply take a geometry and split it into smaller tiles. These tiles can later be used in chipping and downloading the satellite imagery.</p>
<p>First, we create a grid over the area of interest, by using <code>ee.Geometry.coveringGrid()</code>. This function takes two arguments, <em>projection</em> and <em>scale</em>. The projection is ofcourse the projection of the region of interest. However, the scale, is <em>10000</em>, because it is the maximum tile dimension supported by <code>ee.Image.getDownloadURL()</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">// roi is an instance of ee.Geometry()
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">grid</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">roi</span>.<span style="color:#a6e22e">coveringGrid</span>(<span style="color:#a6e22e">roi</span>.<span style="color:#a6e22e">projection</span>(), <span style="color:#ae81ff">10000</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Map</span>.<span style="color:#a6e22e">addLayer</span>(<span style="color:#a6e22e">grid</span>)
</span></span></code></pre></div><p>This results in the following output:
<img src="/faster-downloads/basic_tiling.png" alt="basic_tiling"></p>
<p>For smaller regions (about 200-1000 sq.km), this solution should be sufficiently quick to download the tiles and re-stitch.</p>
<h3 id="improved-tiling">Improved tiling</h3>
<p>For larger regions, we can go one step further, by clipping the tiles to the region of interest. This way we only download tiles containing useful information. This comes with a few caveats. Clipping is done using <code>ee.Feature.intersection()</code> which accepts three arguments, <em>right</em>, <em>maxError</em> and <em>proj</em> and returns any <code>ee.Geometry()</code>. However, for the sake of simplicity, we only want polygons. So we apply a filter to the final collection to remove any unwanted geometries.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">// Create tiles by clipping the grid to the intersection
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tiles</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">grid</span>.<span style="color:#a6e22e">map</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">cell</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">ee</span>.<span style="color:#a6e22e">Feature</span>(<span style="color:#a6e22e">cell</span>).<span style="color:#a6e22e">intersection</span>(<span style="color:#a6e22e">ee</span>.<span style="color:#a6e22e">Feature</span>(<span style="color:#a6e22e">roi</span>), <span style="color:#a6e22e">ee</span>.<span style="color:#a6e22e">ErrorMargin</span>(<span style="color:#ae81ff">1</span>), <span style="color:#a6e22e">roi</span>.<span style="color:#a6e22e">projection</span>())
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Filter tiles based on their geometry. We only want the polygons.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// First set a property &#39;geo&#39; as the type of the geometry of the tile
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">tiles</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tiles</span>.<span style="color:#a6e22e">map</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">tile</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">tile</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;geo&#39;</span>, <span style="color:#a6e22e">tile</span>.<span style="color:#a6e22e">geometry</span>().<span style="color:#a6e22e">type</span>())
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Next, return those tiles with &#39;geo&#39; = &#39;Polygon&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">tiles_fil</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tiles</span>.<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">ee</span>.<span style="color:#a6e22e">Filter</span>.<span style="color:#a6e22e">eq</span>(<span style="color:#e6db74">&#39;geo&#39;</span>, <span style="color:#e6db74">&#39;Polygon&#39;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Map</span>.<span style="color:#a6e22e">addLayer</span>(<span style="color:#a6e22e">tiles_fil</span>, {<span style="color:#e6db74">&#39;color&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;blue&#39;</span>})
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">print</span>(<span style="color:#e6db74">&#39;tiles&#39;</span>, <span style="color:#a6e22e">tiles</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">print</span>(<span style="color:#e6db74">&#39;filtered tiles&#39;</span>, <span style="color:#a6e22e">tiles_fil</span>)
</span></span></code></pre></div><p>This gives the following output:
<img src="/faster-downloads/improved_tiling.png" alt="improved_tiling"></p>
<p>As you can see, we have clipped the tiles to the required region of interest. Further we have reduced the number of tiles slightly which should provide slight improvement to the downloads. This method delivers satisfactory results for slightly larger regions, i.e. 1,000-10,000 sq.km.</p>
<h3 id="advanced-tiling">Advanced tiling</h3>
<p>In general, the above method is the go-to for big downloads, given enough time. I have tested the tesselation method above for country sized (Ghana) mosaics and it gives me the final image in about ~10 minutes. However, you may be interested in single day pictures of the region of interest. Often times, the swaths from satellite imagery are not enough to cover the large region of interest. In these cases, you can improve the focus of the downloader by providing tiles where the image exists.</p>
<p>Therefore, we convert the raster image to a vector (geometry) and create tiles over them. I found this to be easiest using the <a href="https://developers.google.com/earth-engine/apidocs/ee-image-reducetovectors"><code>ee.Image.reduceToVectors()</code></a>. We iterate over the <code>ee.FeatureCollection()</code> returned and perform the above tiling algorithm on each <code>ee.Feature()</code>.</p>
<p>Alternatively, we can also create a <code>coveringGrid()</code> over the initial area and filter tiles intersecting with the result of <code>ee.Image.reduceToVectors()</code>.</p>
<p>Ofcourse, this comes with an overhead per image. The tiling is done dynamically and <code>ee.Image.reduceToVectors()</code> is susceptible to exceeding memory limits. However, for large areas, this significantly reduces the number of tiles created and therefore the download time.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">// Preparing the collection
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">collection</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">ee</span>.<span style="color:#a6e22e">ImageCollection</span>(<span style="color:#e6db74">&#39;COPERNICUS/S1_GRD&#39;</span>)
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">filterDate</span>(<span style="color:#e6db74">&#39;2019-08-30&#39;</span>, <span style="color:#e6db74">&#39;2019-09-15&#39;</span>)
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">ee</span>.<span style="color:#a6e22e">Filter</span>.<span style="color:#a6e22e">listContains</span>(<span style="color:#e6db74">&#39;transmitterReceiverPolarisation&#39;</span>, <span style="color:#e6db74">&#39;VV&#39;</span>))
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">ee</span>.<span style="color:#a6e22e">Filter</span>.<span style="color:#a6e22e">listContains</span>(<span style="color:#e6db74">&#39;transmitterReceiverPolarisation&#39;</span>, <span style="color:#e6db74">&#39;VH&#39;</span>))
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">filterBounds</span>(<span style="color:#a6e22e">roi</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">coll_list</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">collection</span>.<span style="color:#a6e22e">toList</span>(<span style="color:#a6e22e">collection</span>.<span style="color:#a6e22e">size</span>())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// This code to mosaic the collection by dates
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">unique_dates</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">coll_list</span>.<span style="color:#a6e22e">map</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">image</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">ee</span>.<span style="color:#a6e22e">Image</span>(<span style="color:#a6e22e">image</span>).<span style="color:#a6e22e">date</span>().<span style="color:#a6e22e">format</span>(<span style="color:#e6db74">&#39;YYYY-MM-dd&#39;</span>)
</span></span><span style="display:flex;"><span>}).<span style="color:#a6e22e">distinct</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">mosaic_by_date</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">unique_dates</span>.<span style="color:#a6e22e">map</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">date</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">date</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">ee</span>.Date(<span style="color:#a6e22e">date</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">collection</span>.<span style="color:#a6e22e">filterDate</span>(<span style="color:#a6e22e">date</span>, <span style="color:#a6e22e">date</span>.<span style="color:#a6e22e">advance</span>(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;day&#39;</span>)).<span style="color:#a6e22e">mosaic</span>()
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// We get the final image
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">img</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">ee</span>.<span style="color:#a6e22e">Image</span>(<span style="color:#a6e22e">mosaic_by_date</span>.<span style="color:#a6e22e">get</span>(<span style="color:#ae81ff">2</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Create the vector
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Map</span>.<span style="color:#a6e22e">addLayer</span>(<span style="color:#a6e22e">img</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">img_abs</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">img</span>.<span style="color:#a6e22e">select</span>(<span style="color:#e6db74">&#39;VH&#39;</span>).<span style="color:#a6e22e">abs</span>()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">img_set</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">img_abs</span>.<span style="color:#a6e22e">and</span>(<span style="color:#a6e22e">img_abs</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// This is important to reduce computation over the featureCollection() returned 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// by the reduceToVectors() below
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// To see an example, use a sentinel-2 image instead :)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">features</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">img_set</span>.<span style="color:#a6e22e">reduceToVectors</span>({
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">scale</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">10000</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">geometry</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">roi</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">bestEffort</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Tiling is not as straight-forward because of un-packing of ee.List()
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tiles</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">features</span>.<span style="color:#a6e22e">map</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">feature</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">feature</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">ee</span>.<span style="color:#a6e22e">Feature</span>(<span style="color:#a6e22e">feature</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">grid</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">feature</span>.<span style="color:#a6e22e">geometry</span>().<span style="color:#a6e22e">coveringGrid</span>(<span style="color:#a6e22e">roi</span>.<span style="color:#a6e22e">projection</span>(), <span style="color:#ae81ff">10000</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">cells</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">grid</span>.<span style="color:#a6e22e">map</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">tile</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">ee</span>.<span style="color:#a6e22e">Feature</span>(<span style="color:#a6e22e">tile</span>.<span style="color:#a6e22e">intersection</span>(<span style="color:#a6e22e">ee</span>.<span style="color:#a6e22e">Feature</span>(<span style="color:#a6e22e">roi</span>), <span style="color:#a6e22e">ee</span>.<span style="color:#a6e22e">ErrorMargin</span>(<span style="color:#ae81ff">1</span>)))
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">ee</span>.<span style="color:#a6e22e">FeatureCollection</span>(<span style="color:#a6e22e">cells</span>.<span style="color:#a6e22e">toList</span>(<span style="color:#a6e22e">cells</span>.<span style="color:#a6e22e">size</span>()))
</span></span><span style="display:flex;"><span>}).<span style="color:#a6e22e">flatten</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Alternatively, we can also filter grid tiles that intersect with the features
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// var grid = roi.coveringGrid(roi.projection(), 10000)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// var tiles = features.map(function(feat) {
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//   feat = ee.Feature(feat)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//   return grid.filterBounds(feat.geometry())
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// }).flatten()
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// You may adapt the above code to clip to the region of interest.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Again, filtering tiles to remove non-polygons
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">tiles</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tiles</span>.<span style="color:#a6e22e">map</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">tile</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">tile</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;geo_type&#39;</span>, <span style="color:#a6e22e">tile</span>.<span style="color:#a6e22e">geometry</span>().<span style="color:#a6e22e">type</span>())
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">tiles</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tiles</span>.<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">ee</span>.<span style="color:#a6e22e">Filter</span>.<span style="color:#a6e22e">eq</span>(<span style="color:#e6db74">&#39;geo_type&#39;</span>, <span style="color:#e6db74">&#39;Polygon&#39;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Map</span>.<span style="color:#a6e22e">addLayer</span>(<span style="color:#a6e22e">tiles</span>)
</span></span></code></pre></div><p>This gives the following ouput:</p>
<p><img src="/faster-downloads/advanced_tiling.png" alt="advanced_tiling"></p>
<p>As you can see, the tiling is localized to the raster and results in significantly less tiles generated.</p>
<h3 id="final-thoughts">Final thoughts</h3>
<p>Any downloader script should focus on the speed of the downloads as a whole. The computation times leading up to the final download (using <code>ee.Image.getDownloadURL()</code>) usually determine and bottleneck the speed of the downloader. With that in mind, consider the following:</p>
<ol>
<li>Reduce <code>getInfo()</code> calls in the python API to absolute minimum. If they result in <code>connection closed</code> errors, try to simplify the computations. If still failing, encapsulate in retries.</li>
<li>Simplify the incoming region of interest. This has a cascading effect on all the operations in tiling and significantly increases download speed.</li>
<li>Consider downloading small dimension sized tiles (eg. 256x256 or 512x512) to reduce download size.</li>
</ol>
<p>As an exercise, using fixed dimension tiles, try to determine the best scale of the <code>coveringGrid()</code> :) (and let me know :P)</p>
<h3 id="summary">Summary</h3>
<p>In conclusion, we have learned how to create tiles and easily download large images. With very little external tooling we have greatly extended the knowledge imparted by Noel Gorelick in downloading parts of an image in parallel.</p>
<p>The next article in this series will discuss stitching said downloaded tiles using GDAL binaries, or using existing programs like QGIS.</p>
]]></content>
        </item>
        
        <item>
            <title>Leetcode 1641</title>
            <link>https://www.abhigyankishor.ga/posts/2022/05/leetcode-1641/</link>
            <pubDate>Wed, 11 May 2022 18:54:28 +0300</pubDate>
            
            <guid>https://www.abhigyankishor.ga/posts/2022/05/leetcode-1641/</guid>
            <description>Count Sorted Vowel Strings Head on over here to try the problem for yourself.
Hint says back-tracking, solutions say dynamic programming 😅.
Back-tracking Algorithm The goal is to get all sorted combinations of the vowels for a string of length n. I set up a count variable outside the functions to ensure it stays out of scope for all the recursive calls. The helper() function recieves the previous index and remaining charaters.</description>
            <content type="html"><![CDATA[<h2 id="count-sorted-vowel-strings">Count Sorted Vowel Strings</h2>
<p>Head on over <a href="https://leetcode.com/problems/count-sorted-vowel-strings">here</a> to try the problem for yourself.</p>
<p>Hint says <strong>back-tracking</strong>, solutions say <strong>dynamic programming</strong> 😅.</p>
<h3 id="back-tracking">Back-tracking</h3>
<h4 id="algorithm">Algorithm</h4>
<p>The goal is to get all sorted combinations of the vowels for a string of length <code>n</code>. I set up a <code>count</code> variable outside the functions to ensure it stays out of scope for all the recursive calls. The <code>helper()</code> function recieves the previous index and remaining charaters. <code>helper()</code> loops till 4 (because there are 5 vowels). Everytime, <code>n==0</code>, increment <code>counter</code>.</p>
<h4 id="code">Code</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">solution</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> count <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">countVowelStrings</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> n<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    helper<span style="color:#f92672">(</span>n<span style="color:#f92672">,</span>0<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> count<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">helper</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> n<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> index<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>n <span style="color:#f92672">&lt;=</span> 0<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      count<span style="color:#f92672">++;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span><span style="color:#f92672">(;</span> index <span style="color:#f92672">&lt;</span> 5<span style="color:#f92672">;</span> index<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      helper<span style="color:#f92672">(</span>n <span style="color:#f92672">-</span> 1<span style="color:#f92672">,</span> index<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// index not decremented because same 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#75715e">// letters are valid
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="dynamic-programming">Dynamic Programming</h3>
<h4 id="algorithm-1">Algorithm</h4>
<p>The following pattern explains the intuition behind this approach.</p>
<table>
<thead>
<tr>
<th></th>
<th>a</th>
<th>e</th>
<th>i</th>
<th>o</th>
<th>u</th>
</tr>
</thead>
<tbody>
<tr>
<td>n = 1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>n = 2</td>
<td>5</td>
<td>4</td>
<td>3</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>n = 3</td>
<td>15</td>
<td>10</td>
<td>6</td>
<td>3</td>
<td>1</td>
</tr>
<tr>
<td>:</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>The last string will always be <code>uuuu.. n times</code>. Every other string will occur count of previous + count of next.</p>
<h4 id="code-1">Code</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">countVowelStrings</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> n<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> store <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[</span>5<span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> store<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> 
</span></span><span style="display:flex;"><span>    store<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> 1<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// This is the base condition when n = 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// so we check for n &gt; 1 in the while
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">while</span><span style="color:#f92672">(</span>n<span style="color:#f92672">--</span> <span style="color:#f92672">&gt;</span> 1<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 3<span style="color:#f92672">;</span> i <span style="color:#f92672">&gt;=</span> 0<span style="color:#f92672">;</span> i<span style="color:#f92672">--)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      store<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">+=</span> store<span style="color:#f92672">[</span>i<span style="color:#f92672">+</span>1<span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// follow the pattern :)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#75715e">// i was giving i-1 and 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#75715e">// was really confused
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> result <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> store<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span>
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">+=</span> store<span style="color:#f92672">[</span>i<span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Leetcode 216</title>
            <link>https://www.abhigyankishor.ga/posts/2022/05/leetcode-216/</link>
            <pubDate>Tue, 10 May 2022 12:39:01 +0300</pubDate>
            
            <guid>https://www.abhigyankishor.ga/posts/2022/05/leetcode-216/</guid>
            <description>Combination Sum III Head on over here to try the problem for yourself.
Another permutation based problem solved using back-tracking.
Algorithm The goal is to get all combinations (without repeat) of k integers from 1-9 whose sum is n. To achieve this, simply backtrack and decrement n with the current integer. Also, to ensure no repeats, pass in the next integer to the recursive call.
Code public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; combinationSum3(int k, int n) {  List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();  helper(result, new ArrayList&amp;lt;&amp;gt;(), k, n, 1);  return result; }  public void helper(List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result, List&amp;lt;Integer&amp;gt; curr, int k, int n, int index) {  if(n &amp;lt; 0) return;  if(n == 0 &amp;amp;&amp;amp; curr.</description>
            <content type="html"><![CDATA[<h2 id="combination-sum-iii">Combination Sum III</h2>
<p>Head on over <a href="https://leetcode.com/problems/combination-sum-iii">here</a> to try the problem for yourself.</p>
<p>Another permutation based problem solved using <strong>back-tracking</strong>.</p>
<h4 id="algorithm">Algorithm</h4>
<p>The goal is to get all combinations (without repeat) of <code>k</code> integers from 1-9 whose sum is <code>n</code>. To achieve this, simply backtrack and decrement <code>n</code> with the current integer. Also, to ensure no repeats, pass in the next integer to the recursive call.</p>
<h4 id="code">Code</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> List<span style="color:#f92672">&lt;</span>List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;&gt;</span> <span style="color:#a6e22e">combinationSum3</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> k<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> n<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  List<span style="color:#f92672">&lt;</span>List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;&gt;</span> result <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>  helper<span style="color:#f92672">(</span>result<span style="color:#f92672">,</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;(),</span> k<span style="color:#f92672">,</span> n<span style="color:#f92672">,</span> 1<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">helper</span><span style="color:#f92672">(</span>List<span style="color:#f92672">&lt;</span>List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;&gt;</span> result<span style="color:#f92672">,</span> List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> curr<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> k<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> n<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> index<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>n <span style="color:#f92672">&lt;</span> 0<span style="color:#f92672">)</span> <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>n <span style="color:#f92672">==</span> 0 <span style="color:#f92672">&amp;&amp;</span> curr<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">()</span> <span style="color:#f92672">==</span> k<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    result<span style="color:#f92672">.</span><span style="color:#a6e22e">append</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;(</span>curr<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span><span style="color:#f92672">(;</span> index <span style="color:#f92672">&lt;</span> 10<span style="color:#f92672">;</span> index<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// here i had to first append then pass curr
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// because curr.add() returns boolean
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    curr<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>index<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    helper<span style="color:#f92672">(</span>result<span style="color:#f92672">,</span> curr<span style="color:#f92672">,</span> k<span style="color:#f92672">,</span> n <span style="color:#f92672">-</span> index<span style="color:#f92672">,</span> index <span style="color:#f92672">+</span> 1<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// delete previous element to continue in 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// for loop
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    curr<span style="color:#f92672">.</span><span style="color:#a6e22e">remove</span><span style="color:#f92672">(</span>curr<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">()</span> <span style="color:#f92672">-</span> 1<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Leetcode 17</title>
            <link>https://www.abhigyankishor.ga/posts/2022/05/leetcode-17/</link>
            <pubDate>Mon, 09 May 2022 15:46:21 +0300</pubDate>
            
            <guid>https://www.abhigyankishor.ga/posts/2022/05/leetcode-17/</guid>
            <description>Letter Combination of a Phone Number Head on over here to try the problem for yourself.
Most permutation based problems seem to use a back-tracking solution, but don&amp;rsquo;t quote me on that 😅
Algorithm The goal is to get all permutations of letters corresponding to a given phone number. First, we create a mapping of numbers and the corresponding letters. Then we simply set up a backtracking function helper() which will populate our result list with the required solutions.</description>
            <content type="html"><![CDATA[<h2 id="letter-combination-of-a-phone-number">Letter Combination of a Phone Number</h2>
<p>Head on over <a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number">here</a> to try the problem for yourself.</p>
<p>Most permutation based problems seem to use a <strong>back-tracking</strong> solution, but don&rsquo;t quote me on that 😅</p>
<h4 id="algorithm">Algorithm</h4>
<p>The goal is to get all permutations of letters corresponding to a given phone number. First, we create a mapping of numbers and the corresponding letters. Then we simply set up a backtracking function <code>helper()</code> which will populate our <code>result</code> list with the required solutions.</p>
<h4 id="code">Code</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">letterCombinations</span><span style="color:#f92672">(</span>String digit<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> result <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>digits<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">()</span> <span style="color:#f92672">==</span> 0<span style="color:#f92672">)</span> <span style="color:#66d9ef">return</span> result<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span><span style="color:#f92672">[][]</span> map <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#39;b&#39;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#39;c&#39;</span><span style="color:#f92672">},</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;d&#39;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#39;e&#39;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#39;f&#39;</span><span style="color:#f92672">},</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;g&#39;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#39;h&#39;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#39;i&#39;</span><span style="color:#f92672">},</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;j&#39;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#39;k&#39;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#39;l&#39;</span><span style="color:#f92672">},</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;m&#39;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#39;n&#39;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#39;o&#39;</span><span style="color:#f92672">},</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;p&#39;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#39;q&#39;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#39;r&#39;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#39;s&#39;</span><span style="color:#f92672">},</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;t&#39;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#39;u&#39;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#39;v&#39;</span><span style="color:#f92672">},</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;w&#39;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#39;x&#39;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#39;y&#39;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#39;z&#39;</span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">};</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  StringBuilder curr <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> StringBuilder<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  helper<span style="color:#f92672">(</span>result<span style="color:#f92672">,</span> curr<span style="color:#f92672">,</span> digits<span style="color:#f92672">,</span> map<span style="color:#f92672">,</span> 0<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">helper</span><span style="color:#f92672">(</span>List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> result<span style="color:#f92672">,</span> StringBuilder curr<span style="color:#f92672">,</span> String digits<span style="color:#f92672">,</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">[][]</span> map<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> index<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>index <span style="color:#f92672">&gt;=</span> digits<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    result<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>curr<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">char</span> c <span style="color:#f92672">:</span> map<span style="color:#f92672">[</span>digits<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">++)</span> <span style="color:#f92672">-</span><span style="color:#e6db74">&#39;2&#39;</span><span style="color:#f92672">])</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    helper<span style="color:#f92672">(</span>result<span style="color:#f92672">,</span> curr<span style="color:#f92672">.</span><span style="color:#a6e22e">append</span><span style="color:#f92672">(</span>c<span style="color:#f92672">),</span> digits<span style="color:#f92672">,</span> map<span style="color:#f92672">,</span> i<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    curr<span style="color:#f92672">.</span><span style="color:#a6e22e">deleteCharAt</span><span style="color:#f92672">(</span>curr<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">()</span> <span style="color:#f92672">-</span> 1<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// deleteCharAt() here makes the solution
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// move forward correctly in the for loop
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Leetcode 341</title>
            <link>https://www.abhigyankishor.ga/posts/2022/05/leetcode-341/</link>
            <pubDate>Sun, 08 May 2022 14:29:29 +0300</pubDate>
            
            <guid>https://www.abhigyankishor.ga/posts/2022/05/leetcode-341/</guid>
            <description>Flatten Nested List Iterator Head on over here to try the problem for yourself.
I spent way too long trying to figure out that they had already provided the NestedInteger interface XD. The solution is simply a recursion over the elements of nestedList.
Algorithm The goal is to build an iterator over the provided nestedList. So we need to implement next() and hasNext() for the given nestedList. I approach this by converting the nestedList into an ArrayList.</description>
            <content type="html"><![CDATA[<h2 id="flatten-nested-list-iterator">Flatten Nested List Iterator</h2>
<p>Head on over <a href="https://leetcode.com/problems/flatten-nested-list-iterator">here</a> to try the problem for yourself.</p>
<p>I spent way too long trying to figure out that they had already provided the <code>NestedInteger</code> interface XD. The solution is simply a <strong>recursion</strong> over the elements of <code>nestedList</code>.</p>
<h4 id="algorithm">Algorithm</h4>
<p>The goal is to build an iterator over the provided <code>nestedList</code>. So we need to implement <code>next()</code> and <code>hasNext()</code> for the given <code>nestedList</code>. I approach this by converting the <code>nestedList</code> into an <code>ArrayList</code>. I defined a function called <code>build()</code> which converts <code>nestedList</code>, to an <code>ArrayList</code>. It iterates over every element in the <code>nestedList</code> and processes them as follows:</p>
<ol>
<li>if <code>item.isInteger()</code> then <code>arr.add(item.getInteger())</code></li>
<li>else recursively go through every element in the list.</li>
</ol>
<p>Here is an example that illustrates the problem.</p>
<pre tabindex="0"><code>nestedList = [1,2,[3,4,[5,6],7],8]
</code></pre><p>As you can see, element 2 of nestedList contains integers and a list. So we must check each element recursively to build the required arraylist.</p>
<h4 id="code">Code</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">NestedIterator</span> <span style="color:#66d9ef">implements</span> Iterator<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  ArrayList<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> arr<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> index<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">NestedIterator</span><span style="color:#f92672">(</span>List<span style="color:#f92672">&lt;</span>NestedInteger<span style="color:#f92672">&gt;</span> nestedList<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    arr <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>    index <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span>NestedInteger item <span style="color:#f92672">:</span> nestedList<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      build<span style="color:#f92672">(</span>arr<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">build</span><span style="color:#f92672">(</span>NestedInteger item<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// isInteger() and getInteger() are
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// part of the NestedInteger interface
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>item<span style="color:#f92672">.</span><span style="color:#a6e22e">isInteger</span><span style="color:#f92672">())</span>
</span></span><span style="display:flex;"><span>      arr<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>item<span style="color:#f92672">.</span><span style="color:#a6e22e">getInteger</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span>NestedInteger element <span style="color:#f92672">:</span> item<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        build<span style="color:#f92672">(</span>element<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> Integer <span style="color:#a6e22e">next</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> arr<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>index<span style="color:#f92672">++);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">hasNext</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> index <span style="color:#f92672">&lt;</span> arr<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Leetcode 456</title>
            <link>https://www.abhigyankishor.ga/posts/2022/05/leetcode-456/</link>
            <pubDate>Sat, 07 May 2022 16:43:52 +0300</pubDate>
            
            <guid>https://www.abhigyankishor.ga/posts/2022/05/leetcode-456/</guid>
            <description>132 Pattern Head on over here to try the problem for yourself.
This one was so annoying :&amp;rsquo;(. I ended up following this tutorial for ironing out the final cases.
  Algorithm The goal is to maintain a descending monotonic stack to keep track of the minimum value present before each element in the stack. The ideal case is for the ith index to be as small as possible, the jth index to be as large as possible, and the kth index to be somewhere in between.</description>
            <content type="html"><![CDATA[<h2 id="132-pattern">132 Pattern</h2>
<p>Head on over <a href="https://leetcode.com/problems/132-pattern">here</a> to try the problem for yourself.</p>
<p>This one was so annoying :&rsquo;(. I ended up following this tutorial for ironing out the final cases.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/q5ANAl8Z458" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h4 id="algorithm">Algorithm</h4>
<p>The goal is to maintain a <strong>descending monotonic stack</strong> to keep track of the minimum value present before each element in the stack. The ideal case is for the <code>ith</code> index to be as small as possible, the <code>jth</code> index to be as large as possible, and the <code>kth</code> index to be somewhere in between. To keep track of the lowest <code>ith</code> index, we insert into the stack, the smallest element before the current element.</p>
<p>Thats too many words so let&rsquo;s try an example.</p>
<pre tabindex="0"><code>nums[] = [1,4,5,7,8,9,6]
Stack&lt;int[] &gt; st = {}
min = 1
n = nums[1:]
</code></pre><table>
<thead>
<tr>
<th>n</th>
<th>min</th>
<th>st</th>
<th>ith</th>
<th>jth</th>
<th>kth</th>
</tr>
</thead>
<tbody>
<tr>
<td>4</td>
<td>1</td>
<td>{[4,1]}</td>
<td>1</td>
<td>4</td>
<td>?</td>
</tr>
<tr>
<td>5</td>
<td>1</td>
<td>{[5,1]}</td>
<td>1</td>
<td>5</td>
<td>?</td>
</tr>
<tr>
<td>7</td>
<td>1</td>
<td>{[7,1]}</td>
<td>1</td>
<td>7</td>
<td>?</td>
</tr>
<tr>
<td>8</td>
<td>1</td>
<td>{[8,1]}</td>
<td>1</td>
<td>8</td>
<td>?</td>
</tr>
<tr>
<td>9</td>
<td>1</td>
<td>{[9,1]}</td>
<td>1</td>
<td>9</td>
<td>?</td>
</tr>
<tr>
<td>6</td>
<td>1</td>
<td>{[9,1],[6,1]}</td>
<td>1</td>
<td>9</td>
<td>6</td>
</tr>
</tbody>
</table>
<p>We finally get a trio that satisfies so we return <code>true</code>.</p>
<p>Here is a more annoying example.</p>
<pre tabindex="0"><code>nums[] = [1,4,0,-1,-2,-3,-1,-2]
</code></pre><table>
<thead>
<tr>
<th>n</th>
<th>min</th>
<th>st</th>
<th>ith</th>
<th>jth</th>
<th>kth</th>
</tr>
</thead>
<tbody>
<tr>
<td>4</td>
<td>1</td>
<td>{[4,1]}</td>
<td>1</td>
<td>4</td>
<td>?</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>{[4,1],[0,1]}</td>
<td>1</td>
<td>4</td>
<td>?</td>
</tr>
<tr>
<td>-1</td>
<td>0</td>
<td>{[4,1],[0,1],[-1,0]}</td>
<td>0</td>
<td>-1</td>
<td>?</td>
</tr>
<tr>
<td>-2</td>
<td>-1</td>
<td>{[4,1],[0,1],[-1,0],[-2,-1]}</td>
<td>-1</td>
<td>-2</td>
<td>?</td>
</tr>
<tr>
<td>-3</td>
<td>-2</td>
<td>{[4,1],[0,1],[-1,0],[-2,-1],[-3,-2]}</td>
<td>-2</td>
<td>-3</td>
<td>?</td>
</tr>
<tr>
<td>-1</td>
<td>-3</td>
<td>{[4,1],[0,1],[-1,-3]}</td>
<td>-3</td>
<td>-1</td>
<td>?</td>
</tr>
<tr>
<td>-2</td>
<td>-3</td>
<td>{[4,1],[0,1],[-1,-3],[-2,-3]}</td>
<td>-3</td>
<td>-1</td>
<td>-2</td>
</tr>
</tbody>
</table>
<p>We finally get a trio that satisfies so we return <code>true</code>.</p>
<h4 id="code">Code</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">find132pattern</span><span style="color:#f92672">(</span>nums<span style="color:#f92672">[])</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">&lt;</span> 3<span style="color:#f92672">)</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  Stack<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> <span style="color:#f92672">&gt;</span> st <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Stack<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> min <span style="color:#f92672">=</span> nums<span style="color:#f92672">[</span>0<span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 1<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span><span style="color:#f92672">(!</span>st<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">()</span> <span style="color:#f92672">&amp;&amp;</span> nums<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;=</span> st<span style="color:#f92672">.</span><span style="color:#a6e22e">peek</span><span style="color:#f92672">()[</span>0<span style="color:#f92672">])</span> st<span style="color:#f92672">.</span><span style="color:#a6e22e">pop</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span><span style="color:#f92672">(!</span>st<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">()</span> <span style="color:#f92672">&amp;&amp;</span> nums<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> st<span style="color:#f92672">.</span><span style="color:#a6e22e">peek</span><span style="color:#f92672">()[</span>1<span style="color:#f92672">])</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    st<span style="color:#f92672">.</span><span style="color:#a6e22e">push</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> <span style="color:#f92672">{</span>nums<span style="color:#f92672">[</span>i<span style="color:#f92672">],</span> min<span style="color:#f92672">});</span>
</span></span><span style="display:flex;"><span>    min <span style="color:#f92672">=</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">min</span><span style="color:#f92672">(</span>min<span style="color:#f92672">,</span> nums<span style="color:#f92672">[</span>i<span style="color:#f92672">]);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>How to Custom Domain</title>
            <link>https://www.abhigyankishor.ga/posts/2022/05/how-to-custom-domain/</link>
            <pubDate>Fri, 06 May 2022 20:43:37 +0300</pubDate>
            
            <guid>https://www.abhigyankishor.ga/posts/2022/05/how-to-custom-domain/</guid>
            <description>So you want a custom domain name? Here is a step-by-step guide to how to get one (for free) from freenom. I use github pages to host my hugo website so the tutorial will focus on the relevant steps.
  Check availability of a domain name   In the search bar, type out the site name that you want, say example.com. It should give you a few alternatives such as shown in the picture.</description>
            <content type="html"><![CDATA[<h2 id="so-you-want-a-custom-domain-name">So you want a custom domain name?</h2>
<p>Here is a step-by-step guide to how to get one (for free) from <a href="https://www.freenom.com/en/index.html?lang=en">freenom</a>. I use <strong>github pages</strong> to host my <strong>hugo</strong> website so the tutorial will focus on the relevant steps.</p>
<ol>
<li>
<h3 id="check-availability-of-a-domain-name">Check availability of a domain name</h3>
</li>
</ol>
<p>In the search bar, type out the site name that you want, say <code>example.com</code>. It should give you a few alternatives such as shown in the picture. Pick your favourite. If you are a first time user, create an account with freenom and proceed to checkout.</p>
<p><strong><em>NOTE:</em></strong> Sometimes, you may get an error when you hit <code>Get it now!</code> which says <code>not available</code>. Don&rsquo;t worry, just search again with the same domain name but with the exact extension that you wanted. So if the alternative was <code>example.ga</code> search again with <code>example.ga</code>. The problem should be resolved 😄</p>
<ol start="2">
<li>
<h3 id="alias-records-in-your-dns-provider">Alias records in your DNS provider</h3>
</li>
</ol>
<p>In freenom, under <code>Services</code> dropdown, go to <code>My domains</code> and select <code>manage domain</code>. You must provide an alias record for your github website. Go to <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site">GitHub pages documentation</a> to find the ip addresses that correspond to your GitHub page domain name. In my case they are:</p>
<pre tabindex="0"><code>185.199.108.153
185.199.109.153
185.199.110.153
185.199.111.153
</code></pre><p>Navigate to <code>manage freenom DNS</code> and enter this information in the prompt as follows:
<img src="/custom-domain-name/dnsentries.png" alt="DNS records"></p>
<p>Notice the last <code>CNAME</code> entry. This entry should point to your original user site. Make sure it is of the format <code>&lt;user&gt;.github.io</code>.</p>
<ol start="3">
<li>
<h3 id="add-cname-file-in-github">Add CNAME file in github</h3>
</li>
</ol>
<p>In the <code>settings</code> of your github repo, in the <code>code and automation</code> submenu, go to <code>pages</code>. Put your recently acquired domain name under <code>Custom domain</code>. (If the previous steps work, you can also enable <code>enfore HTTPS</code>).</p>
<p><img src="/custom-domain-name/githubpages.png" alt="GitHub pages records"></p>
<ol start="4">
<li>
<h3 id="edit-configtoml-baseurl">Edit config.toml baseURL</h3>
</li>
</ol>
<p>Go to <code>config.toml</code> and change <code>baseURL</code> to your new custom domain name. Build the website, push the changes and&hellip;</p>
<ol start="5">
<li>
<h3 id="wait">Wait!</h3>
</li>
</ol>
<p>DNS entries take some time to propagate across the internet. It took my website about 10 minutes to load correctly. Once its done though, it works like a charm 😄</p>
]]></content>
        </item>
        
        <item>
            <title>Leetcode 1209</title>
            <link>https://www.abhigyankishor.ga/posts/2022/05/leetcode-1209/</link>
            <pubDate>Fri, 06 May 2022 12:49:34 +0300</pubDate>
            
            <guid>https://www.abhigyankishor.ga/posts/2022/05/leetcode-1209/</guid>
            <description>Remove All Adjacent Duplicates in String II Head on over here to try to the problem for yourself.
The problem requires a stack based solution.
Algorithm The goal is the find the shortest string possible by removing k duplicated adjacent characters. A simple problem case is illustrated:
k = 2 s = &amp;#34;abbac&amp;#34; the result must be c. Iteration 1: remove bb =&amp;gt; &amp;#34;aac&amp;#34; Iteration 2: remove aa =&amp;gt; &amp;#34;c&amp;#34; The hint points out that instead of maintaining the character count outside the stack, just pass in an object that stores the counter.</description>
            <content type="html"><![CDATA[<h2 id="remove-all-adjacent-duplicates-in-string-ii">Remove All Adjacent Duplicates in String II</h2>
<p>Head on over <a href="https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string-ii">here</a> to try to the problem for yourself.</p>
<p>The problem requires a <strong>stack</strong> based solution.</p>
<h4 id="algorithm">Algorithm</h4>
<p>The goal is the find the shortest string possible by removing <code>k</code> duplicated adjacent characters. A simple problem case is illustrated:</p>
<pre tabindex="0"><code>k = 2
s = &#34;abbac&#34;
the result must be c.

Iteration 1: remove bb =&gt; &#34;aac&#34;
Iteration 2: remove aa =&gt; &#34;c&#34;
</code></pre><p>The hint points out that instead of maintaining the character count outside the stack, just pass in an object that stores the counter. I have passed an object and an array to arrive at two similar solutions, one with <strong>less memory overhead</strong>, and the latter with <strong>better performance</strong>.</p>
<h4 id="code">Code</h4>
<h5 id="object---pair">Object - Pair</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Pair</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> c<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> n<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Pair</span><span style="color:#f92672">(</span><span style="color:#66d9ef">char</span> curr<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        c <span style="color:#f92672">=</span> curr<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        n <span style="color:#f92672">=</span> 1<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">increment</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        n<span style="color:#f92672">++;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">stringRep</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> Character<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">(</span>c<span style="color:#f92672">).</span><span style="color:#a6e22e">repeat</span><span style="color:#f92672">(</span>n<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">removeDuplicates</span><span style="color:#f92672">(</span>String s<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> k<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    Stack<span style="color:#f92672">&lt;</span>Pair<span style="color:#f92672">&gt;</span> st <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Stack<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> curr<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>      curr <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>st<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">()</span> <span style="color:#f92672">||</span> st<span style="color:#f92672">.</span><span style="color:#a6e22e">peek</span><span style="color:#f92672">().</span><span style="color:#a6e22e">c</span> <span style="color:#f92672">!=</span> curr<span style="color:#f92672">)</span> 
</span></span><span style="display:flex;"><span>        st<span style="color:#f92672">.</span><span style="color:#a6e22e">push</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> Pair<span style="color:#f92672">(</span>curr<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">else</span> st<span style="color:#f92672">.</span><span style="color:#a6e22e">peek</span><span style="color:#f92672">().</span><span style="color:#a6e22e">increment</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>st<span style="color:#f92672">.</span><span style="color:#a6e22e">peek</span><span style="color:#f92672">().</span><span style="color:#a6e22e">n</span> <span style="color:#f92672">==</span> k<span style="color:#f92672">)</span> st<span style="color:#f92672">.</span><span style="color:#a6e22e">pop</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    StringBuilder result <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> StringBuilder<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span>Pair p <span style="color:#f92672">:</span> st<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      result<span style="color:#f92672">.</span><span style="color:#a6e22e">append</span><span style="color:#f92672">(</span>p<span style="color:#f92672">.</span><span style="color:#a6e22e">stringRep</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> result<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h5 id="object---array">Object - array</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">removeDuplicates</span><span style="color:#f92672">(</span>String s<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> k<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  Stack<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> <span style="color:#f92672">&gt;</span> st <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Stack<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> curr<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    curr <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>st<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">()</span> <span style="color:#f92672">||</span> st<span style="color:#f92672">.</span><span style="color:#a6e22e">peek</span><span style="color:#f92672">()[</span>0<span style="color:#f92672">]</span> <span style="color:#f92672">!=</span> curr<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>      st<span style="color:#f92672">.</span><span style="color:#a6e22e">push</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> <span style="color:#f92672">{</span>curr<span style="color:#f92672">,</span> 1<span style="color:#f92672">});</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> st<span style="color:#f92672">.</span><span style="color:#a6e22e">peek</span><span style="color:#f92672">()[</span>1<span style="color:#f92672">]++;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>st<span style="color:#f92672">.</span><span style="color:#a6e22e">peek</span><span style="color:#f92672">()[</span>1<span style="color:#f92672">]</span> <span style="color:#f92672">==</span> k<span style="color:#f92672">)</span> st<span style="color:#f92672">.</span><span style="color:#a6e22e">pop</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  StringBuilder result <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> StringBuilder<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> a <span style="color:#f92672">:</span> st<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span><span style="color:#f92672">(</span>a<span style="color:#f92672">[</span>1<span style="color:#f92672">]--</span> <span style="color:#f92672">&gt;</span> 0<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>      result<span style="color:#f92672">.</span><span style="color:#a6e22e">append</span><span style="color:#f92672">((</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span>a<span style="color:#f92672">[</span>0<span style="color:#f92672">]);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Leetcode 225</title>
            <link>https://www.abhigyankishor.ga/posts/2022/05/leetcode-225/</link>
            <pubDate>Thu, 05 May 2022 15:39:24 +0300</pubDate>
            
            <guid>https://www.abhigyankishor.ga/posts/2022/05/leetcode-225/</guid>
            <description>Implementing Stacks Using Queues Head on over here to try the problem for yourself.
The solution talks about using 2 queues, which frankly I don&amp;rsquo;t understand :&amp;rsquo;). I used a single queue to implement this problem.
Algorithm The goal is to implement a stack using the basic queue features provided such as push(), peek() and pop(). The easiest way to implement this is by inserting elements in reverse order. Then the queue will pop the elements like a stack.</description>
            <content type="html"><![CDATA[<h2 id="implementing-stacks-using-queues">Implementing Stacks Using Queues</h2>
<p>Head on over <a href="https://leetcode.com/problems/implementing-stacks-using-queues">here</a> to try the problem for yourself.</p>
<p>The solution talks about using 2 queues, which frankly I don&rsquo;t understand :&rsquo;). I used a single queue to implement this problem.</p>
<h4 id="algorithm">Algorithm</h4>
<p>The goal is to implement a stack using the basic queue features provided such as <code>push()</code>, <code>peek()</code> and <code>pop()</code>. The easiest way to implement this is by inserting elements in reverse order. Then the queue will pop the elements like a stack.</p>
<h4 id="code">Code</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyStack</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  Queue<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> q<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">MyStack</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    q <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LinkedList<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">push</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> x<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    q<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>x<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> q<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">()</span> <span style="color:#f92672">-</span> 1<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      q<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>q<span style="color:#f92672">.</span><span style="color:#a6e22e">remove</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">pop</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> q<span style="color:#f92672">.</span><span style="color:#a6e22e">remove</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">top</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> q<span style="color:#f92672">.</span><span style="color:#a6e22e">peek</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">empty</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> q<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">()</span> <span style="color:#f92672">==</span> 0<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Leetcode 1769</title>
            <link>https://www.abhigyankishor.ga/posts/2022/05/leetcode-1769/</link>
            <pubDate>Wed, 04 May 2022 14:27:17 +0300</pubDate>
            
            <guid>https://www.abhigyankishor.ga/posts/2022/05/leetcode-1769/</guid>
            <description>Max Number of K-sum Pairs Head on over here to try the problem for yourself.
This is a varaition of the famous two-sum problem that we have all struggled with 😅
Algorithm &amp;amp; Code The slower O(n) The goal is the count unique pairs of integers that sum up to given k. For this, we create a hashmap that stores unique values of the integers. Then we go over the keySet() and update the count according to the following rules:</description>
            <content type="html"><![CDATA[<h2 id="max-number-of-k-sum-pairs">Max Number of K-sum Pairs</h2>
<p>Head on over <a href="https://leetcode.com/problems/max-number-of-k-sum-pairs">here</a> to try the problem for yourself.</p>
<p>This is a varaition of the famous <strong>two-sum</strong> problem that we have all struggled with 😅</p>
<h4 id="algorithm--code">Algorithm &amp; Code</h4>
<h5 id="the-slower-on">The slower O(n)</h5>
<p>The goal is the count unique pairs of integers that sum up to given <code>k</code>. For this, we create a hashmap that stores unique values of the integers. Then we go over the <code>keySet()</code> and update the count according to the following rules:</p>
<ul>
<li>if <code>key = k/2</code> then <code>count += occurence(key)/2</code></li>
<li>if map has <code>k - key</code> then <code>count += Min(occurence(key), occurence(k - key))</code>.</li>
</ul>
<p>I keep track of the visited elements using a HashSet <code>visited</code>. The case of <code>key == k/2</code> is only raised when k, so I avoid any ugly conversions from double to Integer.</p>
<h5 id="slow-code-">Slow code :(</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">maxOperations</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> nums<span style="color:#f92672">[],</span> <span style="color:#66d9ef">int</span> k<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> count <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        HashMap<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">,</span> Integer<span style="color:#f92672">&gt;</span> map <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>        HashSet<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> visited <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashSet<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>map<span style="color:#f92672">.</span><span style="color:#a6e22e">containsKey</span><span style="color:#f92672">(</span>nums<span style="color:#f92672">[</span>i<span style="color:#f92672">]))</span> 
</span></span><span style="display:flex;"><span>              map<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>nums<span style="color:#f92672">[</span>i<span style="color:#f92672">],</span> map<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>nums<span style="color:#f92672">[</span>i<span style="color:#f92672">])</span> <span style="color:#f92672">+</span> 1<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span> map<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>nums<span style="color:#f92672">[</span>i<span style="color:#f92672">],</span> 1<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span>Integer key <span style="color:#f92672">:</span> map<span style="color:#f92672">.</span><span style="color:#a6e22e">keySet</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">printf</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;%d : %d\n&#34;</span><span style="color:#f92672">,</span> key<span style="color:#f92672">,</span> map<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>key<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span>Integer key <span style="color:#f92672">:</span> map<span style="color:#f92672">.</span><span style="color:#a6e22e">keySet</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>visited<span style="color:#f92672">.</span><span style="color:#a6e22e">contains</span><span style="color:#f92672">(</span>key<span style="color:#f92672">))</span> <span style="color:#66d9ef">continue</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>k <span style="color:#f92672">%</span> 2 <span style="color:#f92672">==</span> 0 <span style="color:#f92672">&amp;&amp;</span> key <span style="color:#f92672">==</span> k<span style="color:#f92672">/</span>2<span style="color:#f92672">)</span> 
</span></span><span style="display:flex;"><span>                  count <span style="color:#f92672">+=</span> map<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>key<span style="color:#f92672">)/</span>2<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>map<span style="color:#f92672">.</span><span style="color:#a6e22e">containsKey</span><span style="color:#f92672">(</span>k <span style="color:#f92672">-</span> key<span style="color:#f92672">))</span> 
</span></span><span style="display:flex;"><span>                  count <span style="color:#f92672">+=</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">min</span><span style="color:#f92672">(</span>map<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>key<span style="color:#f92672">),</span> map<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>k <span style="color:#f92672">-</span> key<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>                visited<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>k <span style="color:#f92672">-</span> key<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> count<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>As you can see, we explore the array first. Then we proceed with the counting. Fortunately, some very smart people in the comments came up with a way to do both simultaneously, with the use of <code>HashMap.getOrDefault()</code>.</p>
<h5 id="the-faster-on">The faster O(n)</h5>
<p>This code updates the count incrementally, rather than at once. As a result, it is able to populate the explored hashmap and count simultaneously. It checks if the pair of the element exists in the hashmap. On this basis it executes the following steps:</p>
<ul>
<li><code>if((k-key) in map and occurence(k-key) &gt; 0)</code> then remove an occurence and update count</li>
<li>else just add a new element or update its previous value</li>
</ul>
<h5 id="the-faster-code-">The faster code 😄</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">maxOperations</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> nums<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> k<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        HashMap<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">,</span> Integer<span style="color:#f92672">&gt;</span> map <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> count <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>map<span style="color:#f92672">.</span><span style="color:#a6e22e">containsKey</span><span style="color:#f92672">(</span>k <span style="color:#f92672">-</span> nums<span style="color:#f92672">[</span>i<span style="color:#f92672">])</span> <span style="color:#f92672">&amp;&amp;</span> map<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>k <span style="color:#f92672">-</span> nums<span style="color:#f92672">[</span>i<span style="color:#f92672">])</span> <span style="color:#f92672">&gt;</span> 0<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                count<span style="color:#f92672">++;</span>
</span></span><span style="display:flex;"><span>                map<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>k <span style="color:#f92672">-</span> nums<span style="color:#f92672">[</span>i<span style="color:#f92672">],</span> map<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>k <span style="color:#f92672">-</span> nums<span style="color:#f92672">[</span>i<span style="color:#f92672">])</span> <span style="color:#f92672">-</span> 1<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>              <span style="color:#75715e">// getOrDefault makes this part a lot less ugly 😄
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                map<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>nums<span style="color:#f92672">[</span>i<span style="color:#f92672">],</span> map<span style="color:#f92672">.</span><span style="color:#a6e22e">getOrDefault</span><span style="color:#f92672">(</span>nums<span style="color:#f92672">[</span>i<span style="color:#f92672">],</span> 0<span style="color:#f92672">)</span> <span style="color:#f92672">+</span> 1<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> count<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Leetcode 581</title>
            <link>https://www.abhigyankishor.ga/posts/2022/05/leetcode-581/</link>
            <pubDate>Tue, 03 May 2022 17:10:04 +0300</pubDate>
            
            <guid>https://www.abhigyankishor.ga/posts/2022/05/leetcode-581/</guid>
            <description>Shortest Unsorted Continuous Subarray Head on over here to try the problem for yourself.
I solved this problem using a two-pointer method.
Algorithm The goal is to find the points where the array becomes unsorted. We use two loops, one to find the end of the unsorted sub-array and another to find the start of the unsorted sub-array. start = end = -1 as a way to check if they were updated or not during the loops.</description>
            <content type="html"><![CDATA[<h2 id="shortest-unsorted-continuous-subarray">Shortest Unsorted Continuous Subarray</h2>
<p>Head on over <a href="https://leetcode.com/problems/shortest-unsorted-continuous-subarray">here</a> to try the problem for yourself.</p>
<p>I solved this problem using a two-pointer method.</p>
<h4 id="algorithm">Algorithm</h4>
<p>The goal is to find the points where the array becomes unsorted. We use two loops, one to find the end of the unsorted sub-array and another to find the start of the unsorted sub-array. <code>start = end = -1</code> as a way to check if they were updated or not during the loops. If they were not, then array is sorted and we <code>return 0</code>. Else we return <code>end - start + 1</code>.</p>
<h4 id="code">Code</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>pbulic <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">findUnsortedSubarray</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> nums<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> start <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>1<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> end <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>1<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> prev <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">//finding end
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 1<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// try to find the index of next 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// smallest number from prev
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>nums<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> nums<span style="color:#f92672">[</span>prev<span style="color:#f92672">])</span> end <span style="color:#f92672">=</span> i<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> prev <span style="color:#f92672">=</span> i<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> prev <span style="color:#f92672">=</span> nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 1<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">//finding start
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 1<span style="color:#f92672">;</span> i <span style="color:#f92672">&gt;=</span> 0<span style="color:#f92672">;</span> i<span style="color:#f92672">--)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// try to find the index of nex
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// biggest number from prev
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>nums<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> nums<span style="color:#f92672">[</span>prev<span style="color:#f92672">])</span> start <span style="color:#f92672">=</span> i<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> prev <span style="color:#f92672">=</span> i<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#f92672">(</span>start <span style="color:#f92672">&lt;</span> 0 <span style="color:#f92672">&amp;&amp;</span> end <span style="color:#f92672">&lt;</span> 0<span style="color:#f92672">)</span> <span style="color:#f92672">?</span> 0 <span style="color:#f92672">:</span> end <span style="color:#f92672">-</span> start <span style="color:#f92672">+</span> 1<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="testcases">Testcases</h4>
<pre tabindex="0"><code>[1,3,2,2,2]
start = 1
end = 4
</code></pre><p>An odd testcase that shows the strage loop working. In this case, the whole right side of the array is unsorted. For finding <code>end</code>, we would have the following run:</p>
<table>
<thead>
<tr>
<th>i</th>
<th>prev</th>
<th>end</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>-1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>-1</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>1</td>
<td>4</td>
</tr>
</tbody>
</table>
<p>Finding <code>start</code> happens simlarly and we get a good result.</p>
]]></content>
        </item>
        
        <item>
            <title>Leetcode 905</title>
            <link>https://www.abhigyankishor.ga/posts/2022/05/leetcode-905/</link>
            <pubDate>Mon, 02 May 2022 11:36:29 +0300</pubDate>
            
            <guid>https://www.abhigyankishor.ga/posts/2022/05/leetcode-905/</guid>
            <description>Sort Array by Parity Head on over here to try the problem for yourself.
I attempted a two-pointer approach to try and solve it.
Algorithm The goal is to try to return the parity array in one pass. For this reason, I create a new array result[] and two pointers, evenPtr, pointing to the start of result[] and oddPtr, pointing to the end of result[]. Now I loop over the initial array.</description>
            <content type="html"><![CDATA[<h2 id="sort-array-by-parity">Sort Array by Parity</h2>
<p>Head on over <a href="https://leetcode.com/problems/sort-array-by-parity/">here</a> to try the problem for yourself.</p>
<p>I attempted a <strong>two-pointer</strong> approach to try and solve it.</p>
<h4 id="algorithm">Algorithm</h4>
<p>The goal is to try to return the parity array in one pass. For this reason, I create a new array <code>result[]</code> and two pointers, <code>evenPtr</code>, pointing to the start of <code>result[]</code> and <code>oddPtr</code>, pointing to the end of <code>result[]</code>. Now I loop over the initial array. If the element encountered is even, it is pushed at <code>evenPtr</code>, and vice versa. The pointers are updated for the next iteration.</p>
<h4 id="code">Code</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> <span style="color:#a6e22e">sortByParity</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> nums<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> evenPtr <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> oddPtr <span style="color:#f92672">=</span> nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 1<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> result <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[</span>nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> nums<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>nums<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">%</span> 2 <span style="color:#f92672">==</span> 0<span style="color:#f92672">)</span> result<span style="color:#f92672">[</span>evenPtr<span style="color:#f92672">++]</span> <span style="color:#f92672">=</span> nums<span style="color:#f92672">[</span>i<span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> result<span style="color:#f92672">[</span>oddPtr<span style="color:#f92672">--]</span> <span style="color:#f92672">=</span> nums<span style="color:#f92672">[</span>i<span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Leetcode 844</title>
            <link>https://www.abhigyankishor.ga/posts/2022/05/leetcode-844/</link>
            <pubDate>Sun, 01 May 2022 17:55:32 +0300</pubDate>
            
            <guid>https://www.abhigyankishor.ga/posts/2022/05/leetcode-844/</guid>
            <description>Backspace String Compare Head on over here to try the problem for yourself.
There are a few ways discussed in the solutions. I will try to explain the two-pointer method.
Algorithm The goal is to try to build the resultant string in one pass. For this reason, we will iterate over the string backwards. If we encounter #, we simply skip the first valid character that follows. Ofcourse, the caveats are considering more backspaces (#) than actual words, in which case we simply get an empty string.</description>
            <content type="html"><![CDATA[<h2 id="backspace-string-compare">Backspace String Compare</h2>
<p>Head on over <a href="https://leetcode.com/problems/backspace-string-compare/">here</a> to try the problem for yourself.</p>
<p>There are a few ways discussed in the solutions. I will try to explain the two-pointer method.</p>
<h4 id="algorithm">Algorithm</h4>
<p>The goal is to try to build the resultant string in one pass. For this reason, we will iterate over the string <strong>backwards</strong>. If we encounter <code>#</code>, we simply skip the first valid character that follows. Ofcourse, the <strong>caveats</strong> are considering more backspaces (<code>#</code>) than actual words, in which case we simply get an empty string. Further, we need a way to handle a series of backspaces and skip an equal number of valid characters.</p>
<h4 id="code">Code</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">backspaceCompare</span><span style="color:#f92672">(</span>String s<span style="color:#f92672">,</span> String t<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> skip <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> <span style="color:#75715e">// variable to keep track of skips
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">()</span> <span style="color:#f92672">-</span> 1<span style="color:#f92672">;</span> <span style="color:#75715e">// iterates over the string in reverse
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  StringBuilder s1 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> StringBuilder<span style="color:#f92672">();</span> <span style="color:#75715e">// stores result of s
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  StringBuilder s2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> StringBuilder<span style="color:#f92672">();</span> <span style="color:#75715e">// stores result of t
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> c<span style="color:#f92672">;</span> <span style="color:#75715e">// temporarily stores the current character
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span><span style="color:#f92672">(</span>i <span style="color:#f92672">&gt;=</span> 0<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    c <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>c <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;#&#39;</span><span style="color:#f92672">)</span> skip<span style="color:#f92672">++;</span> <span style="color:#75715e">// increment skip to keep track of number of skips
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>skip <span style="color:#f92672">&gt;</span> 0<span style="color:#f92672">)</span> skip<span style="color:#f92672">--;</span> <span style="color:#75715e">// encouters valid character but skip &gt; 0 so decrement skip
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#66d9ef">else</span> s1<span style="color:#f92672">.</span><span style="color:#a6e22e">append</span><span style="color:#f92672">(</span>c<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    i<span style="color:#f92672">--;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// reset
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  skip <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  i <span style="color:#f92672">=</span> t<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">()</span> <span style="color:#f92672">-</span> 1<span style="color:#f92672">;</span> 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span><span style="color:#f92672">(</span>i <span style="color:#f92672">&gt;=</span> 0<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    c <span style="color:#f92672">=</span> t<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>i<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>c <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;#&#39;</span><span style="color:#f92672">)</span> skip<span style="color:#f92672">++;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>skip <span style="color:#f92672">&gt;</span> 0<span style="color:#f92672">)</span> skip<span style="color:#f92672">--;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">else</span> s2<span style="color:#f92672">.</span><span style="color:#a6e22e">append</span><span style="color:#f92672">(</span>c<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    i<span style="color:#f92672">--;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// I am comparing the built strings to each other, in reverse :P
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>s1<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">().</span><span style="color:#a6e22e">compareTo</span><span style="color:#f92672">(</span>s2<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">())</span> <span style="color:#f92672">==</span> 0<span style="color:#f92672">)</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span> 
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Aloo Gobi</title>
            <link>https://www.abhigyankishor.ga/posts/2022/04/aloo-gobi/</link>
            <pubDate>Sat, 30 Apr 2022 19:46:10 +0300</pubDate>
            
            <guid>https://www.abhigyankishor.ga/posts/2022/04/aloo-gobi/</guid>
            <description>How to cook - Aloo Gobi Sabzi (dry) Ingredients:    Item Quantity Processing     Cauliflower one head cut small floretd &amp;amp; rinse   Potato 1-2 medium sized cut into cubes and rinse   Garlic 1 large/ 2 small clove crushed   Cumin 1 tsp    Hing 1/4 tsp    Turmeric (haldi) 1/2 tsp    Chilli powder 1/4 tsp    Coriander powder 1 tsp    Oil (sarson) 1-2 serving spoon     Procedure:   Put the pan/kadai on the fire.</description>
            <content type="html"><![CDATA[<h2 id="how-to-cook---aloo-gobi-sabzi-dry">How to cook - Aloo Gobi Sabzi (dry)</h2>
<h4 id="ingredients">Ingredients:</h4>
<table>
<thead>
<tr>
<th>Item</th>
<th>Quantity</th>
<th>Processing</th>
</tr>
</thead>
<tbody>
<tr>
<td>Cauliflower</td>
<td>one head</td>
<td>cut small floretd &amp; rinse</td>
</tr>
<tr>
<td>Potato</td>
<td>1-2 <!-- raw HTML omitted --> medium sized</td>
<td>cut into cubes and rinse</td>
</tr>
<tr>
<td>Garlic</td>
<td>1 large/ 2 small clove</td>
<td>crushed</td>
</tr>
<tr>
<td>Cumin</td>
<td>1 tsp</td>
<td></td>
</tr>
<tr>
<td>Hing</td>
<td>1/4 tsp</td>
<td></td>
</tr>
<tr>
<td>Turmeric (haldi)</td>
<td>1/2 tsp</td>
<td></td>
</tr>
<tr>
<td>Chilli powder</td>
<td>1/4 tsp</td>
<td></td>
</tr>
<tr>
<td>Coriander powder</td>
<td>1 tsp</td>
<td></td>
</tr>
<tr>
<td>Oil (sarson)</td>
<td>1-2 <!-- raw HTML omitted --> serving spoon</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="procedure">Procedure:</h4>
<ol>
<li>
<p>Put the pan/kadai on the fire. [<em>deeper round bottom pan preferred</em>] Put in 2 serving spoon of oil and turn the flame to high.</p>
</li>
<li>
<p>Add in the cumin once the oil is hot and let it sputter. Then add hing and cauliflower florets. [<em>we shallow fry the gobi first with oil so it doesn’t taste like gas</em>]. Stir on high flame till the raw smell of cauliflower is gone and the edges have started to brown. This should take anywhere between 5-10 min depending on type and quantity of cauliflower. Once done reduce flame to low and take the cauliflower out onto a plate.</p>
</li>
<li>
<p>Now in the empty pan add 1 serving spoon of oil, and turn flame to high. Add in the potatoes and sauté till golden brown and semi cooked.</p>
</li>
<li>
<p>Add back the cauliflowers to the pan and stir on high heat for 2 min. Then turn the flame to low and let the vegetables cook on low for about 5 min.</p>
</li>
<li>
<p>In the meantime, crush the garlic and in the same vessel add haldi, mirchi, dhaniya and salt. Then add water and create a masala mixture.</p>
</li>
<li>
<p>At this point the sabzi should have been cooking on low flame for about 5 min with intermittent stirring. Add in the masala mixture and continue to cook on low flame till the water reduces almost completely, and the raw smell of garlic is gone. [<em>depending on gobi type, you can cover during this step to make sure the gobi and aloo soften</em>]</p>
</li>
<li>
<p>Turn flame to high and stir rapidly. In this step you are trying to sear the masala and the veggies. Stir till you feel sticking at the bottom of the pan. Then add enough water to just cover the vegetables. Let it simmer on high flame.</p>
</li>
<li>
<p>Once the water starts to reduce, observe your veggies, if still not cooked either cover and cook on low flame, or add more water and cook on high flame.</p>
</li>
<li>
<p>If the vegetables have softened to you liking continue to cook on high flame till water is almost gone. At this point add in the fresh coriander leaves.</p>
</li>
<li>
<p>Stir and turn heat off when water is gone.</p>
</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Seam Aloo</title>
            <link>https://www.abhigyankishor.ga/posts/2022/04/seam-aloo/</link>
            <pubDate>Sat, 30 Apr 2022 19:46:10 +0300</pubDate>
            
            <guid>https://www.abhigyankishor.ga/posts/2022/04/seam-aloo/</guid>
            <description>How to cook - Seam Aloo Sabzi Ingredients:    Item Quantity Processing     Seam 250g cut 2in pieces and rinse   Potato 1-2 medium sized cut into cubes and rinse   Tomato 1 medium sized    Garlic 1 large/ 2 small clove crushed   Cumin 1 tsp    Hing 1/4 tsp    Turmeric (haldi) 1/2 tsp    Chilli powder 1/4 tsp    Coriander powder 1 tsp    Oil (sarson) 1-2 serving spoon    Amchur Powder 1tsp    Sarson 1 1/2 tsp     Procedure:   Cut the tomato into quarters and put it in the microwave for 4-5 min.</description>
            <content type="html"><![CDATA[<h2 id="how-to-cook---seam-aloo-sabzi">How to cook - Seam Aloo Sabzi</h2>
<h4 id="ingredients">Ingredients:</h4>
<table>
<thead>
<tr>
<th>Item</th>
<th>Quantity</th>
<th>Processing</th>
</tr>
</thead>
<tbody>
<tr>
<td>Seam</td>
<td>250g</td>
<td>cut 2in pieces and rinse</td>
</tr>
<tr>
<td>Potato</td>
<td>1-2 <!-- raw HTML omitted --> medium sized</td>
<td>cut into cubes and rinse</td>
</tr>
<tr>
<td>Tomato</td>
<td>1 medium sized</td>
<td></td>
</tr>
<tr>
<td>Garlic</td>
<td>1 large/ 2 small clove</td>
<td>crushed</td>
</tr>
<tr>
<td>Cumin</td>
<td>1 tsp</td>
<td></td>
</tr>
<tr>
<td>Hing</td>
<td>1/4 tsp</td>
<td></td>
</tr>
<tr>
<td>Turmeric (haldi)</td>
<td>1/2 tsp</td>
<td></td>
</tr>
<tr>
<td>Chilli powder</td>
<td>1/4 tsp</td>
<td></td>
</tr>
<tr>
<td>Coriander powder</td>
<td>1 tsp</td>
<td></td>
</tr>
<tr>
<td>Oil (sarson)</td>
<td>1-2 <!-- raw HTML omitted --> serving spoon</td>
<td></td>
</tr>
<tr>
<td>Amchur Powder</td>
<td>1tsp</td>
<td></td>
</tr>
<tr>
<td>Sarson</td>
<td>1 1/2 tsp</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="procedure">Procedure:</h4>
<ol>
<li>
<p>Cut the tomato into quarters and put it in the microwave for 4-5 min.</p>
</li>
<li>
<p>Add oil to a pan/kadhai (rounder, deep bottomed pan preferred) and wait till it’s hot. Then add the cumin and let it splatter. Add hing and immediately add in the potatoes.
[<em>all this is done while the pan is on high heat. Be careful of oil splatter. DO NOT put the aloo into cold oil. It will not cook and instead just harden and drink the oil.</em>]</p>
</li>
<li>
<p>Let the potatoes cook on medium high heat, till browned. Then add in the seam and stir it till covered in oil evenly. Cook till the seam starts getting seared or sticking to the bottom of the pan. Then turn the flame to low. And let it cook for 5 more min.
[<em>once again, the aim is to semi cook the potato. Depending on the type of potato you have cooking times may differ</em>].</p>
</li>
<li>
<p>While the sabzi is on low flame, on the side crush the garlic, add haldi, mirchi, salt and dhaniya to a bowl and add some water to make a masala mix. Add this mix to the sabzi and stir. Let it keep cooking on low flame.</p>
</li>
<li>
<p>Take the tomatoes out of the microwave, remove the skin and crush the pulp. Once all the water from the masala mix has nearly dried, and the raw smell of garlic has gone from the sabzi, add the mashed tomatoes to the pan. Stir it to mix and then cover the pan. Let it cook covered for about 10 min. Uncover intermittently to stir and make sure nothing has burned or stuck to the bottom of the pan.</p>
</li>
<li>
<p>After about 10 min the tomatoes should be cooked through. Uncover the pan and cook on low flame uncovered for another 2-3 min. At this point check if the potatoes are cooked by breaking with your spatula. They should be almost fully cooked at this stage.</p>
</li>
<li>
<p>Turn the flame high now and stir rapidly till the tomato/masala water starts to fully dry out/crisp up. Then add enough water that all the vegetable are half submerged. Let this cook on high flame.</p>
</li>
<li>
<p>Once the water has almost completely reduced, check if the potatoes and seam are cooked soft. If not yet cooked can add more water and repeat till everything is cooked.</p>
</li>
</ol>
<p>OPTIONAL
9.  Then turn off heat. Taste your masala, and if more sourness is needed add and mix in amchur as required at this point.</p>
]]></content>
        </item>
        
        <item>
            <title>Broccoli Mushroom Soup</title>
            <link>https://www.abhigyankishor.ga/posts/2022/04/broccoli-mushroom-soup/</link>
            <pubDate>Thu, 28 Apr 2022 15:56:20 +0300</pubDate>
            
            <guid>https://www.abhigyankishor.ga/posts/2022/04/broccoli-mushroom-soup/</guid>
            <description>How to cook - Broccoli &amp;amp; Mushroom soup Ingredients: Soup    Item Quantity Processing     Broccoli 1 head cut into florets   Mushroom 250g 1 can sliced   Onion 1 small diced   Garlic 2 cloves diced/sliced   Cumin 1 tsp    Salt 2 tsp    Pepper 1 tsp    Chili flakes 1/4 tsp    Milk 1 cup    Cream OR All-purpose flour 1 tbsp    Oil 2 serving spoon    Butter 1 knob     Croutons    Item Quantity Processing     Bread 10 slices cut into squares   Oil 2 serving spoon     Procedure: Soup  Take a wide, heavy bottomed pan, that distributes heat well.</description>
            <content type="html"><![CDATA[<h1 id="how-to-cook---broccoli--mushroom-soup">How to cook - Broccoli &amp; Mushroom soup</h1>
<h4 id="ingredients">Ingredients:</h4>
<h5 id="soup"><em>Soup</em></h5>
<table>
<thead>
<tr>
<th>Item</th>
<th>Quantity</th>
<th>Processing</th>
</tr>
</thead>
<tbody>
<tr>
<td>Broccoli</td>
<td>1 head</td>
<td>cut into florets</td>
</tr>
<tr>
<td>Mushroom</td>
<td>250g</td>
<td>1 can sliced</td>
</tr>
<tr>
<td>Onion</td>
<td>1 small</td>
<td>diced</td>
</tr>
<tr>
<td>Garlic</td>
<td>2 cloves</td>
<td>diced/sliced</td>
</tr>
<tr>
<td>Cumin</td>
<td>1 tsp</td>
<td></td>
</tr>
<tr>
<td>Salt</td>
<td>2 tsp</td>
<td></td>
</tr>
<tr>
<td>Pepper</td>
<td>1 tsp</td>
<td></td>
</tr>
<tr>
<td>Chili flakes</td>
<td>1/4 tsp</td>
<td></td>
</tr>
<tr>
<td>Milk</td>
<td>1 cup</td>
<td></td>
</tr>
<tr>
<td>Cream <!-- raw HTML omitted --> OR All-purpose flour</td>
<td>1 tbsp</td>
<td></td>
</tr>
<tr>
<td>Oil</td>
<td>2 serving spoon</td>
<td></td>
</tr>
<tr>
<td>Butter</td>
<td>1 knob</td>
<td></td>
</tr>
</tbody>
</table>
<h5 id="croutons"><em>Croutons</em></h5>
<table>
<thead>
<tr>
<th>Item</th>
<th>Quantity</th>
<th>Processing</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bread</td>
<td>10 slices</td>
<td>cut into squares</td>
</tr>
<tr>
<td>Oil</td>
<td>2 serving spoon</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="procedure">Procedure:</h4>
<h5 id="soup-1"><em>Soup</em></h5>
<ol>
<li>Take a wide, heavy bottomed pan, that distributes heat well.</li>
<li>Add oil to the pan. Once hot (stick hand close to oil. It should feel warm), put in the cumin seeds. Let them sputter, then add garlic and sauté till garlic starts browning.</li>
<li>Reduce flame a little and add the broccoli florets. BE CAREFUL OF SPLUTTERING OIL. Increase flame to hig. Sauté till broccoli sears.</li>
<li>Add onions and mushroom, and stir till everything is cooked (about 5-10 min on high heat, or till mushrooms shrink).</li>
<li>Reduce head, and add milk and cream. Let everything simmer for 2-3 minutes, then turn off flame.
OR
If using flor, take veggies out of pan. Add a knob of butter to pan, on low head. Add the flour and stir together. It should form a paste. Cook till raw smell of lour is gone (about 2-3 min), then slowly add the milk while whisking everything together to prevent clumps. Once combined, let sauce simmer for a minute and add veggies back into pan. Let everything cook for anotehr 1-2 minutes and then turn off the heat.</li>
<li>Put everything in a blender and blend till smooth. Add water/salt/pepper as required.</li>
</ol>
<h5 id="croutons-1"><em>Croutons</em></h5>
<ol>
<li>Rinse out your pan. Add the oil and let it heat on a high flame. Once the oil is hot enough, bring flame to lowest.</li>
<li>Add in the bread and mix till all the pieces are coated uniformly in the oil.</li>
<li>Continue to stir on low to medium flame, till the bread is crisp.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Aloo Beans</title>
            <link>https://www.abhigyankishor.ga/posts/2022/04/aloo-beans/</link>
            <pubDate>Thu, 28 Apr 2022 14:26:38 +0300</pubDate>
            
            <guid>https://www.abhigyankishor.ga/posts/2022/04/aloo-beans/</guid>
            <description>How to cook - Aloo Beans Sabzi Ingredients:    Item Quantity Processing     Beans (runner/long) 250g cut and washed   Potato 1-2 medium sized cut and washed   Garlic 1 big clove crushed   Cumin 1 tsp    Hing 1/4 tsp    Turmeric (haldi) 1/2 tsp    Chilli powder 1/4 tsp    Coriander powder 1 tsp    Oil 1-2 serving spoon     Procedure:  Take a kadhai/round bottom pan.</description>
            <content type="html"><![CDATA[<h2 id="how-to-cook---aloo-beans-sabzi">How to cook - Aloo Beans Sabzi</h2>
<h4 id="ingredients">Ingredients:</h4>
<table>
<thead>
<tr>
<th>Item</th>
<th>Quantity</th>
<th>Processing</th>
</tr>
</thead>
<tbody>
<tr>
<td>Beans <!-- raw HTML omitted --> (runner/long)</td>
<td>250g</td>
<td>cut and washed</td>
</tr>
<tr>
<td>Potato</td>
<td>1-2 <!-- raw HTML omitted --> medium sized</td>
<td>cut and washed</td>
</tr>
<tr>
<td>Garlic</td>
<td>1 big clove</td>
<td>crushed</td>
</tr>
<tr>
<td>Cumin</td>
<td>1 tsp</td>
<td></td>
</tr>
<tr>
<td>Hing</td>
<td>1/4 tsp</td>
<td></td>
</tr>
<tr>
<td>Turmeric (haldi)</td>
<td>1/2 tsp</td>
<td></td>
</tr>
<tr>
<td>Chilli powder</td>
<td>1/4 tsp</td>
<td></td>
</tr>
<tr>
<td>Coriander powder</td>
<td>1 tsp</td>
<td></td>
</tr>
<tr>
<td>Oil</td>
<td>1-2 <!-- raw HTML omitted --> serving spoon</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="procedure">Procedure:</h4>
<ol>
<li>Take a kadhai/round bottom pan. Add the oil and let it heat. once it&rsquo;s hot enough add the cumin and let it sputter. Then add hing.</li>
<li>Add in the potatoes, and sauté on high flame till the potatoes start browning. [<em>Depending on type of potato, you may have to put on sim and cover and cook. the aim here is to semi cook the outer part of potato.</em>]</li>
<li>Once the potatoes start browning, throw in the beans. Continue to sauté on high till beans start searing <strong>OR</strong> start sticking to the bottom of pan. then reduce heat and let it cook stirring every few minutes.</li>
<li>While this cooks, crush the garlic. Add turmeric, salt, chili powder and coriander powder to the same bowl. Add some water and mix, then set aside.</li>
<li>By this time most of the moisture in the pan will have dried. Add the masala mixture to the pan and mix well. Leave on sim and cover to cook as needed. [<em>The aim here is to cook till the beans and potatoes are cooked completely. Cover for short intervals and stir in between. We don&rsquo;t cover and just forget about the veggies, because then they taste watery. We want to use the steam to cook the veggies.</em>]</li>
<li>Once everything is cooked, take off the lid and stir on high till all the water is gone.</li>
<li>Turn of heat.</li>
</ol>
<p><em>If you want to add tomatoes to your sabzi, cut 1 tomato into quarters and precook in the microwave (~3 min). Take off the skins and mash it up. Add it to the sabzi after the masala in step 5, and cook as normal.</em></p>
]]></content>
        </item>
        
    </channel>
</rss>
